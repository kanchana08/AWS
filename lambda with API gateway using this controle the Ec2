using lambda function with Api gateway as trigger Controle the Ec2 instances.  
  

[] create lambda function. 
[] On the Configuration tab, choose General configuration, and then choose Edit. Set Timeout to 10 seconds, and then choose Save. 
[] add permission to lambda role, i.e. ec2 full access and API gateway.
(go to IAM, select role, choose which we create lambda add the permissions) 

[] create Api gateway for trigger. 
[] select add trigger  

[] select Api gateway 
[] create new API 
[] select HTTP API 
[]in security. Select open  
[] ADD  


import boto3
import json  
from datetime import datetime

def lambda_handler(event, context):
    ec2 = boto3.client('ec2')  # Initialize the EC2 client

    try:
        data = json.loads(event["body"])["instanceid"]
        print(data)

        # Get the current time in UTC
        current_time = datetime.utcnow()

        # Define start and stop times
        start_time = current_time.replace(hour=11, minute=42, second=0, microsecond=0)
        stop_time = current_time.replace(hour=11, minute=50, second=0, microsecond=0)

        # Describe the instance to get its current state
        response = ec2.describe_instances(InstanceIds=[data])
        state = response['Reservations'][0]['Instances'][0]['State']['Name']

        if current_time >= start_time and current_time < stop_time:  # Between start and stop times
            if state == 'stopped':
                ec2.start_instances(InstanceIds=[data])
                return {
                    'statusCode': 200,
                    'body': f'Starting instance {data}'
                }
            else:
                return {
                    'statusCode': 200,
                    'body': f'Instance {data} is already running.'
                }
        elif current_time >= stop_time:  # After stop time
            if state == 'running':
                ec2.stop_instances(InstanceIds=[data])
                return {
                    'statusCode': 200,
                    'body': f'Stopping instance {data}'
                }

        return {
            'statusCode': 200,
            'body': 'No action taken.'
        }

    except KeyError as e:
        return {
            'statusCode': 400,
            'body': json.dumps({"error": f"Missing key: {str(e)}"})
        }
    except Exception as e:
        return {
            'statusCode': 500,
            'body': json.dumps({"error": str(e)})
        }
==========================================================================

import boto3
import json  
from datetime import datetime

def lambda_handler(event, context):
    ec2 = boto3.client('ec2')  # Initialize the EC2 client

    try:
        data = json.loads(event["body"])["instanceid"]
        print(data)

        # Get the current time in UTC
        current_time = datetime.utcnow()

        # Define start and stop times
        start_time = current_time.replace(hour=10, minute=10, second=0, microsecond=0)
        stop_time = current_time.replace(hour=10, minute=8, second=0, microsecond=0)

        # Describe the instance to get its current state
        response = ec2.describe_instances(InstanceIds=[data])
        state = response['Reservations'][0]['Instances'][0]['State']['Name']

        if current_time >= start_time and current_time < stop_time:  # Between start and stop times
            if state == 'stopped':
                ec2.start_instances(InstanceIds=[data])
                return {
                    'statusCode': 200,
                    'body': f'Starting instance {data}'
                }
            else:
                return {
                    'statusCode': 200,
                    'body': f'Instance {data} is already running.'
                }
        elif current_time >= stop_time:  # After stop time
            if state == 'running':
                ec2.stop_instances(InstanceIds=[data])
                return {
                    'statusCode': 200,
                    'body': f'Stopping instance {data}'
                }

        return {
            'statusCode': 200,
            'body': 'No action taken.'
        }

    except KeyError as e:
        return {
            'statusCode': 400,
            'body': json.dumps({"error": f"Missing key: {str(e)}"})
        }
    except Exception as e:
        return {
            'statusCode': 500,
            'body': json.dumps({"error": str(e)})
        }
